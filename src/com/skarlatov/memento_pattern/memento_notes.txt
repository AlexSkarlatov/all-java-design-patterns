OverView,
The memento design pattern wil capture and externalize an objects internal state so that the object can be restored to this state later, without violating the encapsulation
	• The goal is to save the state of an object so that in the future we can go back to the specified state
	• Implemented in such a way that the  saved sate data of the object is not accessible outside the object
		○ Protects the eintegrity of saved state data
		○ Does not break encapsulation
	• You can use this pattern when you want to be able to return an object to one of its previous states if your user requests an "undo"




Examples
	• In Notepad we use undo frequently by pressing ctr z
	• A classic example includes the state in a finite state machine
	• In real world database programming we often need to roll back a transactionoperation
	• In a video game a save progress option
		○ Players can store their game progress and at least recover most of their efforts when their character dies
		○ Save progreesss function would return a player to thae last level he she completed successfully
	• A graphical editor that supports connectivity between objects a user can connect
		○  ause
		○ A user can connect two rectangles with a line the rectangles stay connected when the uer moves either of them
		○ The editor ensure that the line stretches to maintainthte connection

Why the memento?
*
	• Sometimes it is necessary to record the internal state of an object
		○ Required when implementing checkpoints and undo mechanisms
			§ Let users back out of tentative operations or recover from errors
	• You must save  state information somewehere so that you can restore objects to their previouis states


( 4(
	• Objects normally encapsulate some or all of their state
		○ Making it inaccessible to other objects and impossible to save externally
		○ Exposing this state would violate encaspulation
			§ Can compromiste the applications reliability and extinsibility
	• The memento addresses the above issues without violating encapsulation

ADVANTAGES AND DRAWBACKS
	• Simple and easy to implement
	• Provides easy to implement recovery capability
	• A drawback to using memento is that saving and restoring state can be time consuming
Consider using serialization to save a systems state


	Participants
	• Memento
		○ Stores the internal state of the originator object
		○ May store as much or as little of the originators internal state as necessary
		○ Protects against access by objects other than the originator
	• The memento has effectively two interfaces
		○ Caretaker interface
			§ Sees only a narrow interface to the memento a reference to the memnto
			§ Can only pass the memento to other objects
		○ Originiator sees a wider interface on the memento
			§ Lets it access all data necssary to restore itself to its previous state
		○ Only the originator that produced the memento would be permited to access the memento's internal state
	• Originator
		○ Creates a memento containing a snapshopt of its current internal state.
		○ This would be like the notepadd++ appication or the video game progress
		○ Uses thememento to restore its internal state4
	• 2care takeer
		○ Responsible for the mementos safekeeping
		○ Never operates on or examines the contents of a emento
	• This desing pattern is implemented with the two above objects

ORIGINaotr and cCARETAKER DETAILS

	• Originator is the object whose state needs to be saved and restored
	• Caretakeer is the helper classs that is responsible for storing and restoring the originators state through the memnto object
		○ Keeps track of multiple mementos (maintaining save points )
		○ Meemnto is stored as an object within the caretaker
	• A caretaker requests a memento from an originator ,  holds it for a time, and passes it back to the originiator
	• Sometimes the caretaker will not pass the meemtno back to the originator
		○ The originator may never need to revert to an earlier state
	• Mementos are passibe
Only the originator that created a memento will assign or retrieve its state


Sequence diagram

	• Memento is an inner class of the originator
	• A caretaker would like to perfomr an operation on the originator while having the possiblility to jrollback
	• A caretaker calls the create memento() method on the originator asking the originator to pass it a memento obje ct
		○ The originator creates a memento object saving its internal state and passes the mento to the caretaker
		○ The caretaker maintinats the mentio object and perfoms the operation
	• In case of the neec to undo the operation, the caretaker calls the setMementio() method on the originator passing the maintained memento object
		○ Originator would accept the memento, using it to restore its previous state


IMPLEMTnation consequences

	• The memento avoids exposing information that only an originator should manage but that must be stored nevertheless outside the originator
		○ SHIELDS OTHER OBJECTS from potentially complex originator internals, htereby presserving  encapsulation boundaries
	• Having clients manage the state hey ask for simplifies the originator and keeps clients from having to notify originators when they are done
	• Mementos  might incur considerable overhead if originator must copy large amounts of information to store in the meemtno
		○ Unless encapsulating and restoring originator state is cheap the pattern might bnot be appropriate

In summary
-----------------------
	• The memento will store the internal states of the originator
	• The originator can access the internal states of the memento and it has the ability to restore into its earlier state
		○ Can also retriev information from the memento
The caretaker takes care of the ementos safekeeping or protection and it should not examine the contents of the emento